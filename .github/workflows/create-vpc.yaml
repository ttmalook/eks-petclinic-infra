# YAML 문법 오류 방지를 위해 들여쓰기와 주석 위치를 정리한 최종 안전 버전
safe_final_yaml = """\
# ============================================================
# GitHub Actions Workflow: CloudFormation 기반 VPC 자동 배포
# ------------------------------------------------------------
# 이 워크플로는 vpc-3tier.yaml 파일을 AWS CloudFormation을 통해
# 자동으로 배포하여 VPC 및 네트워크 인프라를 생성합니다.
# 실행 조건: 파일 변경(push) 또는 수동 실행(workflow_dispatch)
# ============================================================

name: Deploy VPC via CloudFormation

on:
  push:
    paths:
      - 'vpc-3tier.yaml'
      - '.github/workflows/create-vpc.yaml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: GitHub 저장소의 코드를 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: GitHub Secrets에 등록된 AWS 자격 증명으로 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy CloudFormation Stack
        # 이 단계에서는 CloudFormation 템플릿을 사용하여 VPC를 생성합니다.
        # --template-file: 템플릿 파일 경로
        # --stack-name: 생성할 스택 이름
        # --capabilities: IAM 리소스 생성을 위한 권한 허용
        run: |
          aws cloudformation deploy \
            --template-file vpc-3tier.yaml \
            --stack-name vpc-3tier-stack \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Describe Stack
        # 생성된 CloudFormation 스택의 상태를 출력합니다.
        run: aws cloudformation describe-stacks --stack-name vpc-3tier-stack
"""

# 안전한 최종 YAML 저장 경로
safe_yaml_path = "/mnt/data/create-vpc-safe-final.yaml"
with open(safe_yaml_path, "w") as f:
    f.write(safe_final_yaml)

safe_yaml_path
