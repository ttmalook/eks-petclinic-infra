name: Create EKS Cluster

# ============================================================
# GitHub Actions Workflow: EKS 클러스터 자동 생성
# ------------------------------------------------------------
# 1. CloudFormation으로 생성된 VPC Stack에서 VPC ID/Subnet ID 추출
# 2. 해당 값으로 eks-cluster.yaml 파일을 동적으로 생성
# 3. eksctl을 사용하여 EKS 클러스터 자동 생성
# ============================================================

on:
  workflow_dispatch:  # 수동 실행 허용
  push:
    paths:
      - .github/workflows/create-eks.yaml  # 워크플로 변경 시 자동 실행

jobs:
  eks-create:
    runs-on: ubuntu-latest

    steps:
      # Step 1: GitHub 리포지토리 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: AWS 자격 증명 구성 (Secrets에서 키를 불러옴)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Step 3: CloudFormation Outputs에서 VPC/Subnet ID 추출
      # - 스택 이름이 존재하는지 확인
      # - OutputKey: VpcId, PrivateSubnetA, PrivateSubnetC 기준으로 ID 추출
      - name: Extract CloudFormation Outputs
        id: extract
        run: |
          set -e
          STACK_NAME="vpc-3tier-stack"

          # 스택 존재 여부 확인
          if ! aws cloudformation describe-stacks --stack-name "$STACK_NAME" > /dev/null 2>&1; then
            echo "❌ Stack '$STACK_NAME' does not exist. Please check the name."
            exit 1
          fi

          # VPC 및 Subnet ID 추출
          VPC_ID=$(aws cloudformation describe-stacks             --stack-name "$STACK_NAME"             --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue"             --output text)

          SUBNET_A=$(aws cloudformation describe-stacks             --stack-name "$STACK_NAME"             --query "Stacks[0].Outputs[?OutputKey=='PrivateSubnetA'].OutputValue"             --output text)

          SUBNET_C=$(aws cloudformation describe-stacks             --stack-name "$STACK_NAME"             --query "Stacks[0].Outputs[?OutputKey=='PrivateSubnetC'].OutputValue"             --output text)

          # 환경 변수로 저장하여 이후 단계에서 사용
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "SUBNET_A=$SUBNET_A" >> $GITHUB_ENV
          echo "SUBNET_C=$SUBNET_C" >> $GITHUB_ENV

      # Step 4: eksctl CLI 설치 (기본 미포함)
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      # Step 5: 동적으로 eks-cluster.yaml 파일 생성
      # - 추출된 VPC/Subnet ID를 사용하여 구성 파일 생성
      - name: Generate eks-cluster.yaml
        run: |
          cat > eks-cluster.yaml <<EOF
          apiVersion: eksctl.io/v1alpha5
          kind: ClusterConfig

          metadata:
            name: petclinic
            region: ap-northeast-2

          vpc:
            id: $VPC_ID
            subnets:
              private:
                ap-northeast-2a:
                  id: $SUBNET_A
                ap-northeast-2c:
                  id: $SUBNET_C

          nodeGroups:
            - name: ng-petclinic
              instanceType: t3.medium
              desiredCapacity: 2
              privateNetworking: true
          EOF

      # Step 6: eksctl로 EKS 클러스터 생성
      - name: Create EKS Cluster
        run: eksctl create cluster -f eks-cluster.yaml
