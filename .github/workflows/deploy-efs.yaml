# GitHub Actions Workflow: EFS 자동 생성 + Kubernetes PV/PVC 적용
# 이 워크플로는 EFS 파일시스템을 생성하고, Helm values.yaml에 volumeHandle을 자동 주입한 뒤
# EFS용 StorageClass, PV, PVC를 클러스터에 적용합니다.
# 또한 보안 그룹 ID와 서브넷 ID는 CloudFormation Stack Output에서 자동으로 가져옵니다.

name: Deploy EFS Storage and Configure Kubernetes

on:
  workflow_dispatch:

jobs:
  efs-setup:
    runs-on: ubuntu-latest

    steps:
    # 저장소 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3

    # AWS 인증 구성
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # kubectl 설정
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.27.1

    # kubeconfig 생성
    - name: Configure kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ap-northeast-2 --name petclinic-cluster

    # CloudFormation 스택에서 서브넷 및 보안 그룹 ID 추출
    - name: Get VPC Stack Outputs
      id: cf
      run: |
        echo "Fetching VPC outputs from CloudFormation..."
        export STACK_NAME=vpc-3tier-stack
        export SUBNET_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='PrivateWebA'].OutputValue" --output text)
        export SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=eks-petclinic-cluster-sg* --query "SecurityGroups[0].GroupId" --output text)
        export FS_ID=$(aws efs create-file-system --performance-mode generalPurpose --query "FileSystemId" --output text)
        echo "volumeHandle=$FS_ID" >> $GITHUB_ENV
        echo "subnetId=$SUBNET_ID" >> $GITHUB_ENV
        echo "securityGroupId=$SG_ID" >> $GITHUB_ENV

    # Helm values.yaml 파일에 volumeHandle 값 자동 삽입
    - name: Update Helm values.yaml
      run: |
        sed -i "s|volumeHandle:.*|volumeHandle: ${volumeHandle}|" charts/petclinic/values.yaml

    # EFS Mount Target 생성 (각 가용 영역에 대해 생성 필요 시 반복)
    - name: Create EFS Mount Target
      run: |
        aws efs create-mount-target           --file-system-id ${volumeHandle}           --subnet-id ${subnetId}           --security-groups ${securityGroupId}

    # Kubernetes에 StorageClass, PV, PVC 적용
    - name: Apply EFS StorageClass, PV, PVC
      run: |
        kubectl apply -f efs/storageclass.yaml
        kubectl apply -f efs/pv.yaml
        kubectl apply -f efs/pvc.yaml