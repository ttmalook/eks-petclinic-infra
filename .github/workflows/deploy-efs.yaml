name: deploy-efs

on:
  workflow_dispatch:  # 수동 실행 허용
  push:               # 특정 파일 변경 시 자동 실행
    paths:
      - 'efs/**'
      - '.github/workflows/deploy-efs.yaml'

jobs:
  efs-setup:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2                    # AWS 리전 설정
      EKS_CLUSTER_NAME: petclinic-cluster           # 실제 EKS 클러스터 이름
      VPC_STACK_NAME: vpc-3tier-stack               # 실제 VPC 스택 이름

    steps:
      # 1. GitHub 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 구성 (GitHub Secrets 사용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. kubectl CLI 설치
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      # 4. EKS 클러스터와 연결을 위한 kubeconfig 구성
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name $EKS_CLUSTER_NAME

      # 5. CloudFormation 스택에서 SubnetId, SecurityGroupId 추출
      - name: Get VPC Stack Outputs (subnet, security group)
      # 🔍 디버깅: subnet_id, sg_id 출력 확인
      - name: Debug VPC Outputs
        run: |
          echo "👉 Subnet ID: ${{ steps.vpc.outputs.subnet_id }}"
          echo "👉 Security Group ID: ${{ steps.vpc.outputs.sg_id }}"
        id: vpc
        run: |
          subnet_id=$(aws cloudformation describe-stacks \
            --stack-name $VPC_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='SubnetId'].OutputValue" \
            --output text)

          sg_id=$(aws cloudformation describe-stacks \
            --stack-name $VPC_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='SecurityGroupId'].OutputValue" \
            --output text)

          echo "subnet_id=$subnet_id" >> $GITHUB_OUTPUT
          echo "sg_id=$sg_id" >> $GITHUB_OUTPUT

      # 6. EFS 파일 시스템 생성
      - name: Create EFS File System
        id: efs
        run: |
          fs_id=$(aws efs create-file-system \
            --region $AWS_REGION \
            --tags Key=Name,Value=petclinic-efs \
            --query "FileSystemId" \
            --output text)

          echo "fs_id=$fs_id" >> $GITHUB_OUTPUT
          echo "EFS FileSystem ID: $fs_id"

      # 7. EFS 상태 수동 대기 (available 될 때까지 반복 확인)
      - name: Wait for EFS to be available
        run: |
          fs_id=${{ steps.efs.outputs.fs_id }}
          while true; do
            status=$(aws efs describe-file-systems \
              --file-system-id $fs_id \
              --query "FileSystems[0].LifeCycleState" \
              --output text)

            echo "Current EFS state: $status"

            if [ "$status" == "available" ]; then
              echo "✅ EFS is now available."
              break
            fi

            echo "⏳ Waiting for EFS to become available..."
            sleep 5
          done

      # 8. 마운트 타겟 생성 (subnet 및 security group 연결)
      - name: Create EFS Mount Target
        run: |
          aws efs create-mount-target \
            --file-system-id ${{ steps.efs.outputs.fs_id }} \
            --subnet-id ${{ steps.vpc.outputs.subnet_id }} \
            --security-groups ${{ steps.vpc.outputs.sg_id }}

      # 9. Helm values.yaml 파일에 volumeHandle에 EFS ID 삽입
      - name: Update Helm values.yaml (inject EFS volumeHandle)
        run: |
          efs_id=${{ steps.efs.outputs.fs_id }}
          sed -i "s|volumeHandle:.*|volumeHandle: ${efs_id}|" efs/values.yaml

      # 10. StorageClass, PV, PVC 리소스를 쿠버네티스에 적용
      - name: Apply EFS StorageClass, PV, PVC
        run: |
          kubectl apply -f efs/storageclass.yaml
          kubectl apply -f efs/pv.yaml
          kubectl apply -f efs/pvc.yaml
