# GitHub Actions Workflow: EFS 자동 생성 + Kubernetes PV/PVC 적용
# 이 워크플로는 EFS 파일시스템을 생성하고, Helm values.yaml에 volumeHandle을 자동 주입한 뒤
# EFS용 StorageClass, PV, PVC를 클러스터에 적용하는 자동화 과정을 수행합니다.

name: Deploy EFS Storage and Configure Kubernetes

on:
  workflow_dispatch:  # 수동 실행 트리거 허용

jobs:
  efs-setup:
    runs-on: ubuntu-latest  # GitHub Actions에서 사용하는 기본 Ubuntu 실행 환경

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # 코드 체크아웃

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2  # AWS 인증 정보 설정
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3  # kubectl 설치
      with:
        version: v1.27.1

    - name: Configure kubeconfig for EKS
      run: |
        # kubectl이 클러스터에 접근할 수 있도록 설정
        aws eks --region ap-northeast-2 update-kubeconfig --name petclinic-cluster

    - name: Get VPC Stack Outputs (subnet, security group)
      id: get_vpc
      run: |
        # CloudFormation 스택에서 필요한 정보 추출
        subnetId=$(aws cloudformation describe-stacks --stack-name vpc-3tier-stack           --query "Stacks[0].Outputs[?Key=='PrivateWebA'].Value" --output text)
        securityGroupId=$(aws ec2 describe-security-groups           --filters Name=group-name,Values=*-efs-sg           --query "SecurityGroups[0].GroupId" --output text)

        echo "subnetId=$subnetId" >> $GITHUB_OUTPUT
        echo "securityGroupId=$securityGroupId" >> $GITHUB_OUTPUT

    - name: Create EFS File System
      id: create_efs
      run: |
        # EFS 파일 시스템 생성
        fileSystemId=$(aws efs create-file-system           --performance-mode generalPurpose           --throughput-mode bursting           --tags Key=Name,Value=petclinic-efs           --query 'FileSystemId' --output text)
        echo "volumeHandle=$fileSystemId" >> $GITHUB_OUTPUT

    - name: Update Helm values.yaml
      run: |
        # Helm values.yaml에 EFS volumeHandle 주입
        sed -i "s/volumeHandle: .*/volumeHandle: ${{ steps.create_efs.outputs.volumeHandle }}/" charts/petclinic/values.yaml

    - name: Debug subnet and securityGroup
      run: |
        echo "SubnetId: ${{ steps.get-outputs.outputs.subnetId }}"
        echo "SecurityGroupId: ${{ steps.get-outputs.outputs.securityGroupId }}"


    - name: Create EFS Mount Target
      run: |
        # EFS를 VPC 서브넷에 연결하는 마운트 타겟 생성
        aws efs create-mount-target           --file-system-id ${{ steps.create_efs.outputs.volumeHandle }}           --subnet-id ${{ steps.get_vpc.outputs.subnetId }}           --security-groups ${{ steps.get_vpc.outputs.securityGroupId }}

    - name: Apply EFS StorageClass, PV, PVC
      run: |
        # 스토리지클래스, PV, PVC를 클러스터에 적용
        kubectl apply -f charts/petclinic/templates/storageclass.yaml
        kubectl apply -f charts/petclinic/templates/pv.yaml
        kubectl apply -f charts/petclinic/templates/pvc.yaml
