name: deploy-efs

on:

  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ
  push:               # ÌäπÏ†ï ÎîîÎ†âÌÜ†Î¶¨ ÏàòÏ†ï Ïãú ÏûêÎèô Ïã§Ìñâ
    paths:
      - 'efs/**'
      - '.github/workflows/deploy-efs.yaml'

jobs:
  efs-setup:

  workflow_dispatch:
  push:
    paths:
      - 'charts/petclinic/**'
      - '.github/workflows/deploy-efs.yaml'

jobs:
  efs-helm-setup:
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      EKS_CLUSTER_NAME: petclinic-cluster
      VPC_STACK_NAME: vpc-3tier-stack

    steps:
<<<<<<< HEAD
      # 1. GitHub Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. AWS Ïù∏Ï¶ù Íµ¨ÏÑ±
=======
      # 1. Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. AWS ÏûêÍ≤© Ï¶ùÎ™Ö Íµ¨ÏÑ±
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. kubectl CLI ÏÑ§Ïπò
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

<<<<<<< HEAD
      # 4. EKS ÌÅ¥Îü¨Ïä§ÌÑ∞ Ïó∞Í≤∞ÏùÑ ÏúÑÌïú kubeconfig Íµ¨ÏÑ±
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name $EKS_CLUSTER_NAME

      # 5. VPC Ïä§ÌÉùÏóêÏÑú subnetId, default security group Ï∂îÏ∂ú Î∞è ÎîîÎ≤ÑÍπÖ Ï∂úÎ†•
      - name: Get VPC Stack Outputs (subnet & security group)
        id: vpc
        run: |
          # PublicSubnetAÎ•º OutputKeyÎ°ú ÏÇ¨Ïö©
          subnet_id=$(aws cloudformation describe-stacks \
            --stack-name $VPC_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='PublicSubnetA'].OutputValue" \
            --output text)

          # VPC ID Ï∂îÏ∂ú ÌõÑ, Ìï¥Îãπ VPCÏùò default Î≥¥Ïïà Í∑∏Î£π ID Í∞ÄÏ†∏Ïò§Í∏∞
          vpc_id=$(aws cloudformation describe-stacks \
            --stack-name $VPC_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='VPCId'].OutputValue" \
            --output text)

          sg_id=$(aws ec2 describe-security-groups \
            --region $AWS_REGION \
            --filters Name=vpc-id,Values=$vpc_id Name=group-name,Values=default \
            --query "SecurityGroups[0].GroupId" \
            --output text)

          echo "üëâ Subnet ID: $subnet_id"
          echo "üëâ Security Group ID: $sg_id"
=======
      # 4. Helm CLI ÏÑ§Ïπò
      - name: Install Helm
        uses: azure/setup-helm@v3

      # 5. kubeconfig Íµ¨ÏÑ±
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name $EKS_CLUSTER_NAME

      # 6. VPCÏóêÏÑú SubnetId, VPCId Ï∂îÏ∂ú ÌõÑ Í∏∞Î≥∏ SG Ï°∞Ìöå
      - name: Get VPC subnet and default SG
        id: vpc
        run: |
          subnet_id=$(aws cloudformation describe-stacks \
            --stack-name $VPC_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='PublicSubnetA'].OutputValue" \
            --output text)

          vpc_id=$(aws cloudformation describe-stacks \
            --stack-name $VPC_STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='VPCId'].OutputValue" \
            --output text)

          sg_id=$(aws ec2 describe-security-groups \
            --region $AWS_REGION \
            --filters Name=vpc-id,Values=$vpc_id Name=group-name,Values=default \
            --query "SecurityGroups[0].GroupId" \
            --output text)
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)

          echo "subnet_id=$subnet_id" >> $GITHUB_OUTPUT
          echo "sg_id=$sg_id" >> $GITHUB_OUTPUT

<<<<<<< HEAD
      # 6. EFS ÌååÏùº ÏãúÏä§ÌÖú ÏÉùÏÑ±
=======
      # 7. EFS ÌååÏùº ÏãúÏä§ÌÖú ÏÉùÏÑ±
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)
      - name: Create EFS File System
        id: efs
        run: |
          fs_id=$(aws efs create-file-system \
            --region $AWS_REGION \
            --tags Key=Name,Value=petclinic-efs \
            --query "FileSystemId" \
            --output text)

          echo "fs_id=$fs_id" >> $GITHUB_OUTPUT
          echo "EFS FileSystem ID: $fs_id"

<<<<<<< HEAD
      # 7. EFSÍ∞Ä 'available' ÏÉÅÌÉúÍ∞Ä Îê† ÎïåÍπåÏßÄ ÏàòÎèô ÎåÄÍ∏∞ Î£®ÌîÑ
=======
      # 8. EFS ÏÉÅÌÉú ÎåÄÍ∏∞
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)
      - name: Wait for EFS to be available
        run: |
          fs_id=${{ steps.efs.outputs.fs_id }}
          while true; do
            status=$(aws efs describe-file-systems \
              --file-system-id $fs_id \
              --query "FileSystems[0].LifeCycleState" \
              --output text)

            echo "Current EFS state: $status"

            if [ "$status" == "available" ]; then
              echo "‚úÖ EFS is now available."
              break
            fi

            echo "‚è≥ Waiting for EFS to become available..."
            sleep 5
          done

<<<<<<< HEAD
      # 8. EFS ÎßàÏö¥Ìä∏ ÌÉÄÍ≤ü ÏÉùÏÑ± (PublicSubnetA + default SG ÏÇ¨Ïö©)
=======
      # 9. ÎßàÏö¥Ìä∏ ÌÉÄÍ≤ü ÏÉùÏÑ±
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)
      - name: Create EFS Mount Target
        run: |
          aws efs create-mount-target \
            --file-system-id ${{ steps.efs.outputs.fs_id }} \
            --subnet-id ${{ steps.vpc.outputs.subnet_id }} \
            --security-groups ${{ steps.vpc.outputs.sg_id }}

<<<<<<< HEAD
      # 9. Helm values.yaml ÏàòÏ†ï - volumeHandle ÌïÑÎìúÏóê EFS ID Ï£ºÏûÖ
      - name: Update Helm values.yaml (inject EFS volumeHandle)
        run: |
          efs_id=${{ steps.efs.outputs.fs_id }}
          sed -i "s|volumeHandle:.*|volumeHandle: ${efs_id}|" efs/values.yaml

      # 10. EFS Í¥ÄÎ†® StorageClass / PV / PVC Ïø†Î≤ÑÎÑ§Ìã∞Ïä§Ïóê Ï†ÅÏö©
      - name: Apply EFS StorageClass, PV, PVC
        run: |
          kubectl apply -f efs/storageclass.yaml
          kubectl apply -f efs/pv.yaml
          kubectl apply -f efs/pvc.yaml
=======
      # 10. HelmÏúºÎ°ú EFS Î¶¨ÏÜåÏä§ Î∞∞Ìè¨ (EFS ID ÏûêÎèô Ï£ºÏûÖ)
      - name: Deploy EFS via Helm (charts/petclinic)
        run: |
          helm upgrade --install efs-storage ./charts/petclinic \
            --set storage.volumeHandle=${{ steps.efs.outputs.fs_id }}
>>>>>>> 21de8e6 (Update Helm pv.yaml and values.yaml for EFS automation)
