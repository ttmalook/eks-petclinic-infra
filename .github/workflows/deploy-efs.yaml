name: deploy-efs

on:
  workflow_dispatch:
  push:
    paths:
      - 'efs/**'
      - '.github/workflows/deploy-efs.yaml'

jobs:
  efs-setup:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name eks-petclinic

      - name: Get VPC Stack Outputs (subnet, security group)
        id: vpc
        run: |
          subnet_id=$(aws cloudformation describe-stacks \
            --stack-name vpc-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SubnetId'].OutputValue" \
            --output text)

          sg_id=$(aws cloudformation describe-stacks \
            --stack-name vpc-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SecurityGroupId'].OutputValue" \
            --output text)

          echo "subnet_id=$subnet_id" >> $GITHUB_OUTPUT
          echo "sg_id=$sg_id" >> $GITHUB_OUTPUT

      - name: Create EFS File System
        id: efs
        run: |
          fs_id=$(aws efs create-file-system \
            --region $AWS_REGION \
            --tags Key=Name,Value=petclinic-efs \
            --query "FileSystemId" \
            --output text)

          echo "fs_id=$fs_id" >> $GITHUB_OUTPUT
          echo "EFS FileSystem ID: $fs_id"

      - name: Wait for EFS to be available
        run: |
          aws efs wait file-system-available --file-system-id ${{ steps.efs.outputs.fs_id }}

      - name: Create EFS Mount Target
        run: |
          aws efs create-mount-target \
            --file-system-id ${{ steps.efs.outputs.fs_id }} \
            --subnet-id ${{ steps.vpc.outputs.subnet_id }} \
            --security-groups ${{ steps.vpc.outputs.sg_id }}

      - name: Update Helm values.yaml (inject EFS volumeHandle)
        run: |
          sed -i "s|volumeHandle:.*|volumeHandle: ${efs_id}|" efs/values.yaml

      - name: Apply EFS StorageClass, PV, PVC
        run: |
          kubectl apply -f efs/storageclass.yaml
          kubectl apply -f efs/pv.yaml
          kubectl apply -f efs/pvc.yaml
