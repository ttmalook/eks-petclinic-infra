# 이 워크플로우는 GitHub Actions를 통해 EFS를 자동으로 생성하고
# EFS를 사용하는 Helm Chart(petclinic)를 배포하는 전체 자동화 파이프라인입니다.

name: deploy-efs

# 워크플로우 트리거 조건 정의
on:
  # 수동 실행 버튼 허용
  workflow_dispatch:
  
  # 특정 경로의 파일이 변경될 경우 자동 실행
  push:
    paths:
      - 'charts/petclinic/**'                        # Helm Chart 내부 변경 감지
      - '.github/workflows/deploy-efs.yaml'          # 이 워크플로 자체 변경 시

jobs:
  efs-helm-setup:
    runs-on: ubuntu-latest  # GitHub Actions에서 사용할 runner

    env:
      AWS_REGION: ap-northeast-2                    # 배포할 리전
      EKS_CLUSTER_NAME: petclinic                   # 클러스터 이름 수정됨
      VPC_STACK_NAME: vpc-3tier-stack               # VPC Stack 이름 (CloudFormation 기준)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig             --region $AWS_REGION             --name $EKS_CLUSTER_NAME

      - name: Get VPC subnet and default SG
        id: vpc
        run: |
          subnet_id=$(aws cloudformation describe-stacks             --stack-name $VPC_STACK_NAME             --query "Stacks[0].Outputs[?OutputKey=='PublicSubnetA'].OutputValue"             --output text)
          vpc_id=$(aws cloudformation describe-stacks             --stack-name $VPC_STACK_NAME             --query "Stacks[0].Outputs[?OutputKey=='VPCId'].OutputValue"             --output text)
          sg_id=$(aws ec2 describe-security-groups             --region $AWS_REGION             --filters Name=vpc-id,Values=$vpc_id Name=group-name,Values=default             --query "SecurityGroups[0].GroupId"             --output text)
          echo "subnet_id=$subnet_id" >> $GITHUB_OUTPUT
          echo "sg_id=$sg_id" >> $GITHUB_OUTPUT

      - name: Create EFS File System
        id: efs
        run: |
          fs_id=$(aws efs create-file-system             --region $AWS_REGION             --tags Key=Name,Value=petclinic-efs             --query "FileSystemId"             --output text)
          echo "fs_id=$fs_id" >> $GITHUB_OUTPUT
          echo "EFS FileSystem ID: $fs_id"

      - name: Wait for EFS to be available
        run: |
          fs_id=${{ steps.efs.outputs.fs_id }}
          while true; do
            status=$(aws efs describe-file-systems               --file-system-id $fs_id               --query "FileSystems[0].LifeCycleState"               --output text)
            echo "Current EFS state: $status"
            if [ "$status" == "available" ]; then
              echo "✅ EFS is now available."
              break
            fi
            echo "⏳ Waiting for EFS to become available..."
            sleep 5
          done

      - name: Create EFS Mount Target
        run: |
          aws efs create-mount-target             --file-system-id ${{ steps.efs.outputs.fs_id }}             --subnet-id ${{ steps.vpc.outputs.subnet_id }}             --security-groups ${{ steps.vpc.outputs.sg_id }}

      - name: Deploy EFS via Helm (charts/petclinic)
        run: |
          helm upgrade --install petclinic ./charts/petclinic \
                       --set storage.volumeHandle=${{ steps.efs.outputs.fs_id }} \
                       -n petclinic
